# Reusable Commit Linting Workflow
#
# This workflow validates that PR titles and commit messages follow Conventional Commits format.
#
# Usage:
#   jobs:
#     commitlint:
#       uses: hope0hermes/SharedWorkflows/.github/workflows/reusable-commitlint.yml@main

name: Reusable Commit Linting

on:
  workflow_call:

jobs:
  commitlint:
    runs-on: ubuntu-latest
    name: Lint Commit Messages
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate PR title
        if: github.event_name == 'pull_request'
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          # Check if PR title follows conventional commit format (case-insensitive)
          if ! echo "$PR_TITLE" | grep -qiE "^(feat|fix|docs|style|refactor|perf|test|chore|ci|build)(\(.+\))?!?:.+"; then
            echo "❌ PR title must follow Conventional Commits format"
            echo ""
            echo "Valid format: <type>(<scope>): <description>"
            echo ""
            echo "Valid types:"
            echo "  feat:     New feature"
            echo "  fix:      Bug fix"
            echo "  docs:     Documentation changes"
            echo "  style:    Code formatting (no logic change)"
            echo "  refactor: Code refactoring"
            echo "  perf:     Performance improvements"
            echo "  test:     Adding or updating tests"
            echo "  chore:    Maintenance tasks"
            echo "  ci:       CI/CD changes"
            echo "  build:    Build system changes"
            echo ""
            echo "Examples:"
            echo "  ✓ feat: add new feature"
            echo "  ✓ fix: correct bug in calculation"
            echo "  ✓ docs: update README with examples"
            echo ""
            echo "Your PR title: '$PR_TITLE'"
            exit 1
          fi
          echo "✓ PR title follows Conventional Commits format"

      - name: Validate commit messages
        run: |
          # Get all commits in the PR (excluding merge commits)
          COMMITS=$(git log origin/main..HEAD --no-merges --pretty=format:"%s")

          echo "Checking commit messages..."
          echo ""

          # Check each commit (case-insensitive)
          INVALID_COUNT=0
          while IFS= read -r commit_msg; do
            # Skip empty lines
            [ -z "$commit_msg" ] && continue

            if ! echo "$commit_msg" | grep -qiE "^(feat|fix|docs|style|refactor|perf|test|chore|ci|build)(\(.+\))?!?:.+"; then
              echo "❌ Invalid: $commit_msg"
              INVALID_COUNT=$((INVALID_COUNT + 1))
            else
              echo "✓ Valid: $commit_msg"
            fi
          done <<< "$COMMITS"

          if [ $INVALID_COUNT -gt 0 ]; then
            echo ""
            echo "Found $INVALID_COUNT invalid commit message(s)"
            echo ""
            echo "Please squash or amend commits to follow Conventional Commits format"
            exit 1
          fi

          echo ""
          echo "✓ All commit messages follow Conventional Commits format"
