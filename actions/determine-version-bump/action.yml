name: 'Determine Version Bump Type'
description: 'Analyze commits to determine version bump (major/minor/patch/none)'
author: 'hope0hermes'

branding:
  icon: 'git-commit'
  color: 'orange'

outputs:
  bump_type:
    description: 'Type of version bump (major/minor/patch/none)'
    value: ${{ steps.analyze.outputs.bump_type }}
  
  commits:
    description: 'List of commits analyzed'
    value: ${{ steps.analyze.outputs.commits }}

runs:
  using: "composite"
  steps:
    - name: Analyze commits
      id: analyze
      shell: bash
      run: |
        # Get all commit messages since last tag (or all commits if no tags)
        if git describe --tags --abbrev=0 2>/dev/null; then
          LAST_TAG=$(git describe --tags --abbrev=0)
          COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s")
          echo "Analyzing commits since $LAST_TAG"
        else
          COMMITS=$(git log --pretty=format:"%s")
          echo "Analyzing all commits (no previous tags)"
        fi
        
        echo "commits<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMITS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "Commits found:"
        echo "$COMMITS"
        
        # Analyze commits using regex patterns for Conventional Commits
        # Priority: major > minor > patch > none (if any commit is major, bump major)
        if echo "$COMMITS" | grep -qE "^(feat|feature)(\(.+\))?!|BREAKING CHANGE:"; then
          BUMP="major"
          echo "✓ Breaking changes detected → MAJOR bump"
        elif echo "$COMMITS" | grep -qE "^(feat|feature)(\(.+\))?:"; then
          BUMP="minor"
          echo "✓ New features detected → MINOR bump"
        elif echo "$COMMITS" | grep -qE "^(fix|bugfix|perf|refactor)(\(.+\))?:"; then
          BUMP="patch"
          echo "✓ Bug fixes detected → PATCH bump"
        else
          BUMP="none"
          echo "✓ No version bump needed (chore, docs, ci, etc.)"
        fi
        
        echo "bump_type=$BUMP" >> $GITHUB_OUTPUT
