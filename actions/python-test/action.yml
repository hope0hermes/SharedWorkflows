name: 'Python Tests'
description: 'Run Python tests with coverage reporting'
author: 'hope0hermes'

branding:
  icon: 'check-square'
  color: 'green'

inputs:
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.12'
  
  working-directory:
    description: 'Directory containing the Python project'
    required: false
    default: '.'
  
  coverage-threshold:
    description: 'Minimum coverage percentage (0-100, 0 = no check)'
    required: false
    default: '0'
  
  upload-coverage:
    description: 'Whether to upload coverage artifacts'
    required: false
    default: 'true'
  
  pytest-args:
    description: 'Additional arguments to pass to pytest (e.g., specific test files)'
    required: false
    default: ''

outputs:
  status:
    description: 'Overall test status (passed/failed)'
    value: ${{ steps.test.outputs.status }}
  
  coverage:
    description: 'Test coverage percentage'
    value: ${{ steps.test.outputs.coverage }}

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install dependencies
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install hatch

    - name: Run tests with coverage
      id: test
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "Running Python tests..."
        
        # Build pytest command with optional args
        PYTEST_CMD="hatch run test:cov"
        if [ -n "${{ inputs.pytest-args }}" ]; then
          PYTEST_CMD="hatch run test:cov ${{ inputs.pytest-args }}"
        fi
        
        # Run tests with coverage
        if eval "$PYTEST_CMD"; then
          echo "status=passed" >> $GITHUB_OUTPUT
          echo "✓ All tests passed"
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "✗ Tests failed"
          exit 1
        fi
        
        # Extract coverage percentage if coverage.xml exists
        if [ -f coverage.xml ]; then
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); print(int(float(tree.getroot().attrib.get('line-rate', 0)) * 100))" 2>/dev/null || echo "0")
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE%"
          
          # Check threshold if set
          if [ "${{ inputs.coverage-threshold }}" -gt 0 ]; then
            if [ "$COVERAGE" -lt "${{ inputs.coverage-threshold }}" ]; then
              echo "✗ Coverage $COVERAGE% is below threshold ${{ inputs.coverage-threshold }}%"
              exit 1
            fi
          fi
        fi

    - name: Upload coverage reports
      if: inputs.upload-coverage == 'true' && always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          ${{ inputs.working-directory }}/coverage.xml
          ${{ inputs.working-directory }}/htmlcov/
        if-no-files-found: ignore
